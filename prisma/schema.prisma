// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String       @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  billboards Billboards[] @relation("StoreToBillboard")
  category   Category[]   @relation("StoreTocategory")
  Size       Size[]       @relation("StoreTosize")
  Color      Color[]      @relation("StoreTocolor")
  product    Product[]    @relation("StoreToProduct")
}

model Billboards {
  id        String     @id @default(uuid())
  label     String
  imageUrl  String
  storeId   String
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  category  Category[] @relation("StoreTocategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreTocategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboards @relation("StoreTocategory", fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Product     Product[]  @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreTosize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreTocolor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatrued Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  image      Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
